//! History buffers
mod iter;
mod serial;

use super::super::Step;
pub use serial::{SerialBuffer, SerialBufferConfig};

/// Build a history buffer.
pub trait BuildHistoryBuffer<O, A> {
    type HistoryBuffer;

    fn build_history_buffer(&self) -> Self::HistoryBuffer;
}

/// An iterator over environment steps.
pub trait StepsIter<'a, O: 'a, A: 'a>: Iterator<Item = &'a Step<O, A>> + ExactSizeIterator {}
impl<'a, O: 'a, A: 'a, T: ?Sized> StepsIter<'a, O, A> for T where
    T: Iterator<Item = &'a Step<O, A>> + ExactSizeIterator
{
}

/// Access steps from a history buffer.
///
/// # Note
/// Returns `Box<dyn Iterator>` instead of using an associated trait so that history buffers
/// are object-safe and mutually compatible (no need to specify the associated trait value).
/// As an added bonus, this avoids having include a lifetime in the trait parameters to work
/// around the lack of generic associated traits.
pub trait HistoryBufferSteps<O, A> {
    /// All steps with episode steps ordered contiguously.
    ///
    /// # Args
    /// * `include_incomplete` - Include incomplete episodes if they have at least this many steps.
    fn steps<'a>(&'a self, include_incomplete: Option<usize>) -> Box<dyn StepsIter<'a, O, A> + 'a>;
}

/// Access episodes from a history buffer
///
/// # Note
/// The return value is left as an associated trait because this is primarily a helper interface.
/// The ultimate interface of [`HistoryBufferData`] should always return steps but with paricular
/// orderings that may be generated by iterating over episodes as an intermediary.
pub trait HistoryBufferEpisodes<'a, O: 'a, A: 'a>
where
    <Self::EpisodesIter as Iterator>::Item: IntoIterator<Item = &'a Step<O, A>>,
{
    /// An iterator of iterator of steps. Each inner iterator represents the steps of an episode.
    type EpisodesIter: Iterator;

    /// All completed episodes in the buffer.
    ///
    /// # Args
    /// * `include_incomplete` - Include incomplete episodes if they have at least this many steps.
    fn episodes(&'a self, include_incomplete: Option<usize>) -> Self::EpisodesIter;
}

/// Access history buffer data
pub trait HistoryBufferData<O, A>: HistoryBufferSteps<O, A> {}

impl<T, O, A> HistoryBufferData<O, A> for T where T: HistoryBufferSteps<O, A> {}
